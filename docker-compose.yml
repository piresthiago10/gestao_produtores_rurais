version: "3.8"
services:
  app:
    build:
      context: .
    container_name: python_app
    env_file: .env
    ports:
      - "8500:8500"
    depends_on:
      - db
      - db_test
    volumes:
      - .:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8500 --reload
    networks:
      - shared_net
    working_dir: /app

  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      bash -c "
      docker-entrypoint.sh postgres &&
      until pg_isready -U ${POSTGRES_USER}; do sleep 1; done &&
      psql -U ${POSTGRES_USER} -d postgres -c 'CREATE DATABASE ${POSTGRES_DB};'"
    networks:
      - shared_net

  db_test:
    image: postgres:15
    container_name: postgres_db_test
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_TEST_DB}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data_test:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      bash -c "
      docker-entrypoint.sh postgres &&
      until pg_isready -U ${POSTGRES_USER}; do sleep 1; done &&
      psql -U ${POSTGRES_USER} -d postgres -c 'CREATE DATABASE ${POSTGRES_TEST_DB};'"
    networks:
      - shared_net

networks:
  shared_net:
    driver: bridge

volumes:
  postgres_data:
  postgres_data_test:
